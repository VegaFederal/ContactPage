name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - cleanup
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          cd src/lambda/contact-processor
          pip install -r requirements.txt
      - name: Run tests
        run: echo "Running tests"

  deploy:
    if: github.event.inputs.action != 'cleanup'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Set environment variables
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'dev' }}"
          STACK_NAME="contact-page-${ENVIRONMENT}"
          TEMPLATE_BUCKET="contact-page-templates-${ENVIRONMENT}"
          DEPLOYMENT_BUCKET="contact-page-deployment-${ENVIRONMENT}"
          
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
          echo "STACK_NAME=$STACK_NAME" >> $GITHUB_ENV
          echo "TEMPLATE_BUCKET=$TEMPLATE_BUCKET" >> $GITHUB_ENV
          echo "DEPLOYMENT_BUCKET=$DEPLOYMENT_BUCKET" >> $GITHUB_ENV

      - name: Create S3 buckets
        run: |
          # Create template bucket if it doesn't exist
          aws s3api head-bucket --bucket ${{ env.TEMPLATE_BUCKET }} 2>/dev/null || aws s3 mb s3://${{ env.TEMPLATE_BUCKET }}
          
          # Create deployment bucket if it doesn't exist
          aws s3api head-bucket --bucket ${{ env.DEPLOYMENT_BUCKET }} 2>/dev/null || aws s3 mb s3://${{ env.DEPLOYMENT_BUCKET }}

      - name: Package Lambda function
        run: |
          cd src/lambda/contact-processor
          pip install -r requirements.txt -t .
          zip -r contact-processor.zip lambda_function.py *.dist-info
          aws s3 cp contact-processor.zip s3://${{ env.DEPLOYMENT_BUCKET }}/${{ env.ENVIRONMENT }}/lambda/
          cd ../../../

      - name: Upload web assets
        run: |
          aws s3 sync src/web/ s3://${{ env.DEPLOYMENT_BUCKET }}/${{ env.ENVIRONMENT }}/web/

      - name: Upload CloudFormation templates
        run: |
          aws s3 cp infrastructure/cloudformation/templates/ s3://${{ env.TEMPLATE_BUCKET }}/templates/ --recursive

      - name: Deploy CloudFormation stack
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{ env.STACK_NAME }}
          template: infrastructure/cloudformation/main-template.yaml
          parameter-overrides: >-
            Environment=${{ env.ENVIRONMENT }},
            TemplateBucket=${{ env.TEMPLATE_BUCKET }}
          no-fail-on-empty-changeset: "1"
          capabilities: "CAPABILITY_NAMED_IAM"

      - name: Upload website files to S3
        run: |
          WEBSITE_BUCKET=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='WebsiteBucketName'].OutputValue" --output text)
          aws s3 sync src/web/ s3://$WEBSITE_BUCKET/

      - name: Get CloudFront URL
        run: |
          CF_URL=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='CloudFrontDistributionDomainName'].OutputValue" --output text)
          echo "Your website is available at: https://$CF_URL"

  cleanup:
    if: github.event.inputs.action == 'cleanup'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Set environment variables
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'dev' }}"
          STACK_NAME="contact-page-${ENVIRONMENT}"
          TEMPLATE_BUCKET="contact-page-templates-${ENVIRONMENT}"
          DEPLOYMENT_BUCKET="contact-page-deployment-${ENVIRONMENT}"
          
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
          echo "STACK_NAME=$STACK_NAME" >> $GITHUB_ENV
          echo "TEMPLATE_BUCKET=$TEMPLATE_BUCKET" >> $GITHUB_ENV
          echo "DEPLOYMENT_BUCKET=$DEPLOYMENT_BUCKET" >> $GITHUB_ENV

      - name: Get bucket names from CloudFormation
        run: |
          # Get the website bucket name
          WEBSITE_BUCKET=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='WebsiteBucketName'].OutputValue" --output text || echo "")
          echo "WEBSITE_BUCKET=$WEBSITE_BUCKET" >> $GITHUB_ENV
          
          # Get the resume bucket name
          RESUME_BUCKET=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='ResumeBucketName'].OutputValue" --output text || echo "")
          echo "RESUME_BUCKET=$RESUME_BUCKET" >> $GITHUB_ENV

      - name: Empty S3 buckets
        run: |
          # Empty website bucket if it exists
          if [ ! -z "${{ env.WEBSITE_BUCKET }}" ]; then
            echo "Emptying website bucket: ${{ env.WEBSITE_BUCKET }}"
            aws s3 rm s3://${{ env.WEBSITE_BUCKET }} --recursive || true
          fi
          
          # Empty resume bucket if it exists
          if [ ! -z "${{ env.RESUME_BUCKET }}" ]; then
            echo "Emptying resume bucket: ${{ env.RESUME_BUCKET }}"
            aws s3 rm s3://${{ env.RESUME_BUCKET }} --recursive || true
          fi
          
          # Empty template bucket if it exists
          aws s3 rm s3://${{ env.TEMPLATE_BUCKET }} --recursive || true
          
          # Empty deployment bucket if it exists
          aws s3 rm s3://${{ env.DEPLOYMENT_BUCKET }} --recursive || true

      - name: Delete CloudFormation stack
        run: |
          echo "Deleting stack: ${{ env.STACK_NAME }}"
          aws cloudformation delete-stack --stack-name ${{ env.STACK_NAME }}
          
          echo "Waiting for stack deletion..."
          aws cloudformation wait stack-delete-complete --stack-name ${{ env.STACK_NAME }} || true

      - name: Delete S3 buckets
        run: |
          echo "Deleting template bucket: ${{ env.TEMPLATE_BUCKET }}"
          aws s3 rb s3://${{ env.TEMPLATE_BUCKET }} --force || true
          
          echo "Deleting deployment bucket: ${{ env.DEPLOYMENT_BUCKET }}"
          aws s3 rb s3://${{ env.DEPLOYMENT_BUCKET }} --force || true