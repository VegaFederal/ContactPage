AWSTemplateFormatVersion: '2010-09-09'
Description: Contact page demo that demonstrates DynamoDB, Lambda, Resume Storage.

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: The deployment environment
  
  VpcId:
    Type: AWS::EC2::VPC::Id
    Default: vpc-03de7ad5a4c7c1822
    Description: ID of the existing company VPC
  
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Default: subnet-0f82bfe94c8055036
    Description: List of existing subnet IDs for deployment

Resources:
  # Security Groups Stack
  SecurityGroupsStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./templates/security-groups.yaml
      Parameters:
        Environment: !Ref Environment
        VpcId: !Ref VpcId
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # DynamoDB Table for Contact Information
  ContactTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-contacts
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # S3 Bucket for Resume Storage
  ResumeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-resumes-${AWS::AccountId}-${AWS::Region}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3000
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # S3 Bucket for Website Hosting
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-website-${AWS::AccountId}-${AWS::Region}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Lambda Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                Resource: !GetAtt ContactTable.Arn
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub ${ResumeBucket.Arn}/*

  # Lambda Function for Contact Processing
  ContactProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-contact-processor
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          CONTACT_TABLE: !Ref ContactTable
          RESUME_BUCKET: !Ref ResumeBucket
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const dynamodb = new AWS.DynamoDB.DocumentClient();
          const { randomUUID } = require('crypto');
          
          exports.handler = async (event) => {
            try {
              const body = JSON.parse(event.body);
              const { firstName, lastName, email, phoneNumber, resumeUrl } = body;
              
              // Validate required fields
              if (!firstName || !lastName || !email) {
                return {
                  statusCode: 400,
                  headers: { 'Access-Control-Allow-Origin': '*' },
                  body: JSON.stringify({ message: 'First name, last name, and email are required' })
                };
              }
              
              const contactItem = {
                id: randomUUID(),
                firstName,
                lastName,
                email,
                phoneNumber: phoneNumber || null,
                resumeUrl: resumeUrl || null,
                createdAt: new Date().toISOString()
              };
              
              await dynamodb.put({
                TableName: process.env.CONTACT_TABLE,
                Item: contactItem
              }).promise();
              
              return {
                statusCode: 200,
                headers: { 'Access-Control-Allow-Origin': '*' },
                body: JSON.stringify({ message: 'Contact information saved successfully', id: contactItem.id })
              };
            } catch (error) {
              console.error('Error:', error);
              return {
                statusCode: 500,
                headers: { 'Access-Control-Allow-Origin': '*' },
                body: JSON.stringify({ message: 'Error processing contact information' })
              };
            }
          };
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Lambda Function for Presigned URL Generation
  PresignedUrlFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-presigned-url
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          RESUME_BUCKET: !Ref ResumeBucket
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const s3 = new AWS.S3();
          const { randomUUID } = require('crypto');
          
          exports.handler = async (event) => {
            try {
              const queryParams = event.queryStringParameters || {};
              const fileType = queryParams.fileType || 'application/pdf';
              const fileName = queryParams.fileName || 'resume.pdf';
              
              const key = `resumes/${randomUUID()}-${fileName}`;
              
              const presignedUrl = s3.getSignedUrl('putObject', {
                Bucket: process.env.RESUME_BUCKET,
                Key: key,
                ContentType: fileType,
                Expires: 300
              });
              
              return {
                statusCode: 200,
                headers: { 'Access-Control-Allow-Origin': '*' },
                body: JSON.stringify({
                  uploadUrl: presignedUrl,
                  fileKey: key,
                  resumeUrl: `s3://${process.env.RESUME_BUCKET}/${key}`
                })
              };
            } catch (error) {
              console.error('Error:', error);
              return {
                statusCode: 500,
                headers: { 'Access-Control-Allow-Origin': '*' },
                body: JSON.stringify({ message: 'Error generating upload URL' })
              };
            }
          };
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # API Gateway REST API
  ContactApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AWS::StackName}-api
      Description: API for contact form processing
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource for Contact Endpoint
  ContactResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ContactApi
      ParentId: !GetAtt ContactApi.RootResourceId
      PathPart: contact

  # API Gateway Method for Contact Endpoint
  ContactMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ContactApi
      ResourceId: !Ref ContactResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactProcessorFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Resource for Presigned URL Endpoint
  PresignedUrlResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ContactApi
      ParentId: !GetAtt ContactApi.RootResourceId
      PathPart: presigned-url

  # API Gateway Method for Presigned URL Endpoint
  PresignedUrlMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ContactApi
      ResourceId: !Ref PresignedUrlResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PresignedUrlFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway CORS for Contact Endpoint
  ContactCorsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ContactApi
      ResourceId: !Ref ContactResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway CORS for Presigned URL Endpoint
  PresignedUrlCorsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ContactApi
      ResourceId: !Ref PresignedUrlResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ContactMethod
      - ContactCorsMethod
      - PresignedUrlMethod
      - PresignedUrlCorsMethod
    Properties:
      RestApiId: !Ref ContactApi
      StageName: !Ref Environment

  # Lambda Permission for Contact Processor
  ContactProcessorPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ContactProcessorFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ContactApi}/${Environment}/POST/contact

  # Lambda Permission for Presigned URL
  PresignedUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PresignedUrlFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ContactApi}/${Environment}/GET/presigned-url

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: WebsiteOrigin
            DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOAI}
          - Id: ApiOrigin
            DomainName: !Sub ${ContactApi}.execute-api.${AWS::Region}.amazonaws.com
            OriginPath: !Sub /${Environment}
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          TargetOriginId: WebsiteOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        CacheBehaviors:
          - PathPattern: /contact
            TargetOriginId: ApiOrigin
            ViewerProtocolPolicy: https-only
            AllowedMethods: [DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT]
            CachedMethods: [GET, HEAD]
            ForwardedValues:
              QueryString: true
              Headers: [Origin]
              Cookies:
                Forward: none
          - PathPattern: /presigned-url
            TargetOriginId: ApiOrigin
            ViewerProtocolPolicy: https-only
            AllowedMethods: [DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT]
            CachedMethods: [GET, HEAD]
            ForwardedValues:
              QueryString: true
              Headers: [Origin]
              Cookies:
                Forward: none
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # CloudFront Origin Access Identity
  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub OAI for ${AWS::StackName}

  # S3 Bucket Policy for Website Bucket
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOAI.S3CanonicalUserId
            Action: s3:GetObject
            Resource: !Sub ${WebsiteBucket.Arn}/*

Outputs:
  CloudFrontDomainName:
    Description: Domain name of the CloudFront distribution
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub ${AWS::StackName}-CloudFrontDomain

  ApiEndpoint:
    Description: URL of the API Gateway endpoint
    Value: !Sub https://${ContactApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
    Export:
      Name: !Sub ${AWS::StackName}-ApiEndpoint

  WebsiteBucketName:
    Description: Name of the S3 bucket for website hosting
    Value: !Ref WebsiteBucket
    Export:
      Name: !Sub ${AWS::StackName}-WebsiteBucket

  ResumeBucketName:
    Description: Name of the S3 bucket for resume storage
    Value: !Ref ResumeBucket
    Export:
      Name: !Sub ${AWS::StackName}-ResumeBucket

  ContactTableName:
    Description: Name of the DynamoDB table for contact information
    Value: !Ref ContactTable
    Export:
      Name: !Sub ${AWS::StackName}-ContactTable